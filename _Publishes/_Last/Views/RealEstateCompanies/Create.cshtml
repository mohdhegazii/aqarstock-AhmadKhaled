@model BrokerMVC.Models.RealEstateCompany
@{
    ViewBag.Title = General.SiteName + " - " + General.CompanyData+"/"+General.CreateNew;
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}
@helper selected(string c, string culture)
{
if (c == culture)
{
        @:checked="checked"
    }
}

<div class="panel panel-primary">
    <div class="panel-heading">
        <div class="row">
            <div class="col-md-7 col-xs-8 pull-right">
                <h2>
                    <i class="fa fa-university"></i>
                    @General.CompanyData - @General.CreateNew
                </h2>
            </div>
            
        </div>
    </div>
    <div class="panel panel-body">

       @using (Html.BeginForm("Create", "RealEstateCompanies", FormMethod.Post, new { enctype = "multipart/form-data" }))
       {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="panel panel-warning">
                    <div class="panel-heading">
                        <div class="panel-title" role="button" data-toggle="collapse" href="#dicBasicData" aria-expanded="false" aria-controls="dicBasicData">
                            <h4>
                                <i class="fa fa-angle-down"></i>
                                <i class="fa fa-address-card"></i>
                                @General.BasicData
                            </h4>
                        </div>
                    </div>
                    <div id="dicBasicData" class="panel panel-body collapse in">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.EnTitle, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.EnTitle, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EnTitle, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.LogoFile, General.Icon, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                            <div class="col-md-10">
                                @Html.TextBoxFor(model => model.LogoFile, new { type = "file", @class = "form-control" })
                                @*<small class="help-block text-warning"><i class="fa fa-info-circle"></i> @Messages.LogoToolTip</small>*@
                                @Html.ValidationMessageFor(model => model.LogoFile, "", new { @class = "text-danger" })

                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(model => model.Summary, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Summary, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Summary, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.EnSummary, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.EnSummary, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EnSummary, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.EnDescription, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.EnDescription, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EnDescription, "", new { @class = "text-danger" })
                            </div>
                        </div>

                    </div>
                </div>
                <div class="panel panel-warning">
                    <div class="panel-heading">
                        <div class="panel-title" role="button" data-toggle="collapse" href="#divAddress" aria-expanded="false" aria-controls="divAddress">
                            <h4>
                                <i class="fa fa-angle-down"></i>
                                <i class="fa fa-map"></i>
                                @General.Address
                            </h4>
                        </div>
                    </div>
                    <div id="divAddress" class="panel panel-body">
                        <div class="col-md-7 pull-right">
                            <div class="form-group">
                                @Html.LabelFor(model => model.CountryId,General.CountryName, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                                <div class="col-md-10">
                                    @Html.DropDownList("CountryId", null, htmlAttributes: new { @class = "form-control", @onchange = "GetCity()" })
                                    @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.CityId, General.CityName, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                                <div class="col-md-10">
                                    @Html.DropDownList("CityId", null, htmlAttributes: new { @class = "form-control", @id = "ddlCity", @onchange = "GetDistrict()" })
                                    @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.DistrictId, General.District, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                                <div class="col-md-10">
                                    @Html.DropDownList("DistrictId", null, htmlAttributes: new { @class = "form-control", @id = "ddldistrict", @onchange = "OnDistrictChange()" })
                                    @Html.ValidationMessageFor(model => model.DistrictId, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Street, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Street, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Street, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Entreet, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Entreet, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Entreet, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Longutide, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Longutide, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Longutide, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-2 pull-right" })
                                <div class="col-md-10">
                                    @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @class = "form-control" } })
                                    @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        </div>
                        <div class="col-md-5">
                            <div id="divMap" class="map-md">

                            </div>
                        </div>
                        </div>
                    </div>
                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-9">
                                <input type="submit" value="@General.Save" class="btn btn-success btn-lg btn-block" />
                            </div>
                        </div>
                    </div>
                    }

                </div>
            </div>
@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render(AppSettingKeysVariables.GoogleMapsKey)
    @Scripts.Render("~/Scripts/js/Map.js")
    <script>
        initMap();
        AddListeners();
                    @*if(@Model.Latitude!=null && @Model.Longutide!=null)
                    {
                        SetLocation('@Model.Latitude', '@Model.Longutide');
                    }*@
                    @*else
        {
            ShowAddress('@Model.Address');
        }*@
                    $(document).ready(function () {
                        $('[data-toggle="tooltip"]').tooltip();
                    });

                    function GetCity() {
                      
                        var stateId = $('#CountryId').val();
                      //  var url = "../GetCities/"@*@Url.Action("GetCities")+"/"+stateId;*@
                        GetAddress($('#CountryId option:selected').text(), 5);
                        $.ajax({
                            url: "@Url.Action("GetCities", "Districts")",
                            type: "GET",
                            dataType: "JSON",
                            data: { CountryID: stateId },
                            success: function (cities) {
                             //   alert("test")
                                $("#ddlCity").html(""); // clear before appending new lis
                                $("#ddlCity").append($('<option></option>').html('@General.Select'));
                                $.each(cities, function (i, city) {
                                    $("#ddlCity").append(
                                        $('<option></option>').val(city.Id).html(city.Name));
                                });
                                $("#ddldistrict").html(""); // clear before appending new list
                                $("#ddldistrict").append($('<option></option>').html('@General.Select'));
                            }
                        });
                    }
                    function OnDistrictChange()
                    {
                        GetAddress($('#ddldistrict option:selected').text(), 12);
                    }
                    function OnStreetChange()
                    {
                        GetAddress($('#Street').text(),15);
                    }
                    function GetDistrict() {
                            var stateId = $('#ddlCity').val();
                            GetAddress($('#ddlCity option:selected').text(),10);
                            //$("#ddlCity").html("");
                            //$("#ddlCity").append($('<option></option>').html('@General.Select'));
                            $.ajax({
                                url: "@Url.Action("GetDistricts", "Districts")",
                                type: "GET",
                                dataType: "JSON",
                                data: { CityID: stateId },
                                success: function (cities) {
                                    //  alert("success")
                                    $("#ddldistrict").html(""); // clear before appending new list
                                    $("#ddldistrict").append($('<option></option>').html('@General.Select'));
                                    $.each(cities, function (i, city) {
                                        $("#ddldistrict").append(
                                            $('<option></option>').val(city.Id).html(city.Name));
                                    });
                                }
                            });
                        }
    </script>
}