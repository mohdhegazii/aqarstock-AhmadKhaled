//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BrokerMVC.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class RealEstateBrokerEntities : DbContext
    {
        public RealEstateBrokerEntities()
            : base("name=RealEstateBrokerEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<District> Districts { get; set; }
        public virtual DbSet<Currency> Currencies { get; set; }
        public virtual DbSet<RealEstateCategory> RealEstateCategories { get; set; }
        public virtual DbSet<RealEstateType> RealEstateTypes { get; set; }
        public virtual DbSet<RealEstateStatu> RealEstateStatus { get; set; }
        public virtual DbSet<RealEstateTypeCriteria> RealEstateTypeCriterias { get; set; }
        public virtual DbSet<SearchKeyword> SearchKeywords { get; set; }
        public virtual DbSet<RealEstateCompany> RealEstateCompanies { get; set; }
        public virtual DbSet<RealEstateProject> RealEstateProjects { get; set; }
        public virtual DbSet<SuspendReason> SuspendReasons { get; set; }
        public virtual DbSet<SubscriberNotification> SubscriberNotifications { get; set; }
        public virtual DbSet<SubscriberLog> SubscriberLogs { get; set; }
        public virtual DbSet<RealEstateProjectPhoto> RealEstateProjectPhotos { get; set; }
        public virtual DbSet<RealEstateProjectVideo> RealEstateProjectVideos { get; set; }
        public virtual DbSet<RealEstateProjectModel> RealEstateProjectModels { get; set; }
        public virtual DbSet<RealEstate> RealEstates { get; set; }
        public virtual DbSet<RealEstatePhoto> RealEstatePhotos { get; set; }
        public virtual DbSet<Subscriber> Subscribers { get; set; }
        public virtual DbSet<PaymentType> PaymentTypes { get; set; }
        public virtual DbSet<SaleType> SaleTypes { get; set; }
        public virtual DbSet<RealEstateSuspended> RealEstateSuspendeds { get; set; }
        public virtual DbSet<RealEstateCriteria> RealEstateCriterias { get; set; }
        public virtual DbSet<RealEstateComplain> RealEstateComplains { get; set; }
        public virtual DbSet<SubscriperMessageType> SubscriperMessageTypes { get; set; }
        public virtual DbSet<CompanyMessage> CompanyMessages { get; set; }
        public virtual DbSet<RealEstatePurchaseRequest> RealEstatePurchaseRequests { get; set; }
        public virtual DbSet<SubscriberFavouriteRealEstate> SubscriberFavouriteRealEstates { get; set; }
        public virtual DbSet<StaticPage> StaticPages { get; set; }
        public virtual DbSet<Advertisement> Advertisements { get; set; }
        public virtual DbSet<NotifyService> NotifyServices { get; set; }
        public virtual DbSet<SubscriperMessage> SubscriperMessages { get; set; }
        public virtual DbSet<CatalogCategory> CatalogCategories { get; set; }
        public virtual DbSet<RealestateCatalogProperty> RealestateCatalogProperties { get; set; }
        public virtual DbSet<RealEstateCatalog> RealEstateCatalogs { get; set; }
        public virtual DbSet<Catalog> Catalogs { get; set; }
        public virtual DbSet<ContentTagCategory> ContentTagCategories { get; set; }
        public virtual DbSet<ContentTag> ContentTags { get; set; }
    
        public virtual ObjectResult<Nullable<int>> CountSearchRealEstate(Nullable<int> saleTypeId, Nullable<int> typeID, Nullable<int> statusID, Nullable<int> countryID, Nullable<int> cityID, Nullable<int> districtID, Nullable<int> area, Nullable<int> price, Nullable<int> paymentType, Nullable<int> currency)
        {
            var saleTypeIdParameter = saleTypeId.HasValue ?
                new ObjectParameter("SaleTypeId", saleTypeId) :
                new ObjectParameter("SaleTypeId", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var areaParameter = area.HasValue ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(int));
    
            var currencyParameter = currency.HasValue ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("CountSearchRealEstate", saleTypeIdParameter, typeIDParameter, statusIDParameter, countryIDParameter, cityIDParameter, districtIDParameter, areaParameter, priceParameter, paymentTypeParameter, currencyParameter);
        }
    
        public virtual ObjectResult<SearchRealEstate_Result> SearchRealEstate(Nullable<int> saleTypeId, Nullable<int> typeID, Nullable<int> statusID, Nullable<int> countryID, Nullable<int> cityID, Nullable<int> districtID, Nullable<int> area, Nullable<int> price, Nullable<int> paymentType, Nullable<int> currency, Nullable<int> fromIndex, Nullable<int> toIndex)
        {
            var saleTypeIdParameter = saleTypeId.HasValue ?
                new ObjectParameter("SaleTypeId", saleTypeId) :
                new ObjectParameter("SaleTypeId", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var districtIDParameter = districtID.HasValue ?
                new ObjectParameter("DistrictID", districtID) :
                new ObjectParameter("DistrictID", typeof(int));
    
            var areaParameter = area.HasValue ?
                new ObjectParameter("Area", area) :
                new ObjectParameter("Area", typeof(int));
    
            var priceParameter = price.HasValue ?
                new ObjectParameter("Price", price) :
                new ObjectParameter("Price", typeof(int));
    
            var paymentTypeParameter = paymentType.HasValue ?
                new ObjectParameter("PaymentType", paymentType) :
                new ObjectParameter("PaymentType", typeof(int));
    
            var currencyParameter = currency.HasValue ?
                new ObjectParameter("Currency", currency) :
                new ObjectParameter("Currency", typeof(int));
    
            var fromIndexParameter = fromIndex.HasValue ?
                new ObjectParameter("FromIndex", fromIndex) :
                new ObjectParameter("FromIndex", typeof(int));
    
            var toIndexParameter = toIndex.HasValue ?
                new ObjectParameter("ToIndex", toIndex) :
                new ObjectParameter("ToIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchRealEstate_Result>("SearchRealEstate", saleTypeIdParameter, typeIDParameter, statusIDParameter, countryIDParameter, cityIDParameter, districtIDParameter, areaParameter, priceParameter, paymentTypeParameter, currencyParameter, fromIndexParameter, toIndexParameter);
        }
    }
}
